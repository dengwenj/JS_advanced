/**
 * 闭包跟函数最大的区别在于，当捕捉闭包的时候，它的 自由变量 会在捕捉时被确定，这样即使脱离了捕捉时的上下文，它也能照常运行
 * 
 * 一个函数和对其周围状态（词法环境）的引用绑定在一起(或者说函数被引用包围)，这样的组合就是闭包（函数 + 自由变量）
 * 也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域
 * 
 * 一个普通的函数 function，如果它可以访问外层作用域的自由变量，那么这个函数就是一个闭包
 * 从广义的角度来说：JS 中的函数都是闭包
 * 从狭义的角度来说：JS 中一个函数，如果访问了外层作用域的变量，那么它就是一个闭包
 */

function foo() {
  var name = "朴睦"
  function bar() {
    console.log(name)
  }

  return bar
}

var fn = foo()
fn()